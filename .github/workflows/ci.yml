name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Testing Jobs
  test-frontend:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web-dashboard, mobile-app]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: 📥 Install dependencies
        working-directory: services/${{ matrix.service }}
        run: npm ci

      - name: 🔍 Lint code
        working-directory: services/${{ matrix.service }}
        run: npm run lint

      - name: 🧪 Run tests
        working-directory: services/${{ matrix.service }}
        run: npm test -- --coverage --watchAll=false

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}

  test-backend:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, alert-management, ai-pipeline, risk-assessment]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prism_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        if: matrix.service != 'ai-pipeline' && matrix.service != 'risk-assessment'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: 🐍 Setup Python
        if: matrix.service == 'ai-pipeline' || matrix.service == 'risk-assessment'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📥 Install Node.js dependencies
        if: matrix.service != 'ai-pipeline' && matrix.service != 'risk-assessment'
        working-directory: services/${{ matrix.service }}
        run: npm ci

      - name: 📥 Install Python dependencies
        if: matrix.service == 'ai-pipeline' || matrix.service == 'risk-assessment'
        working-directory: services/${{ matrix.service }}
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🔍 Lint Node.js code
        if: matrix.service != 'ai-pipeline' && matrix.service != 'risk-assessment'
        working-directory: services/${{ matrix.service }}
        run: npm run lint

      - name: 🔍 Lint Python code
        if: matrix.service == 'ai-pipeline' || matrix.service == 'risk-assessment'
        working-directory: services/${{ matrix.service }}
        run: |
          flake8 src/
          black --check src/
          mypy src/

      - name: 🧪 Run Node.js tests
        if: matrix.service != 'ai-pipeline' && matrix.service != 'risk-assessment'
        working-directory: services/${{ matrix.service }}
        run: npm test -- --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prism_test
          REDIS_URL: redis://localhost:6379

      - name: 🧪 Run Python tests
        if: matrix.service == 'ai-pipeline' || matrix.service == 'risk-assessment'
        working-directory: services/${{ matrix.service }}
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prism_test
          REDIS_URL: redis://localhost:6379

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  # 🔒 Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 🏗️ Build Jobs
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        service: 
          - web-dashboard
          - mobile-app
          - api-gateway
          - alert-management
          - ai-pipeline
          - risk-assessment

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deployment Jobs
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 🔧 Update kubeconfig
        run: aws eks update-kubeconfig --name prism-staging --region us-west-2

      - name: 🚀 Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/prism-web prism-web=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/web-dashboard:${{ github.sha }}
          kubectl set image deployment/prism-api prism-api=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
          kubectl rollout status deployment/prism-web
          kubectl rollout status deployment/prism-api

      - name: 🧪 Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=prism-web --timeout=300s
          kubectl port-forward svc/prism-web 3000:3000 &
          sleep 10
          curl -f http://localhost:3000/health || exit 1

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: 🔧 Update kubeconfig
        run: aws eks update-kubeconfig --name prism-production --region us-west-2

      - name: 🚀 Deploy to production
        run: |
          kubectl apply -f k8s/production/
          kubectl set image deployment/prism-web prism-web=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/web-dashboard:${{ github.event.release.tag_name }}
          kubectl set image deployment/prism-api prism-api=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.event.release.tag_name }}
          kubectl rollout status deployment/prism-web
          kubectl rollout status deployment/prism-api

      - name: 🧪 Run production health checks
        run: |
          kubectl wait --for=condition=ready pod -l app=prism-web --timeout=600s
          # Add production health check commands here

  # 📊 Performance Testing
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ⚡ Run performance tests
        run: |
          k6 run --out json=performance-results.json tests/performance/load-test.js
        env:
          BASE_URL: https://staging.prism-ai.com

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # 📱 Mobile App Build
  build-mobile:
    name: 📱 Build Mobile App
    runs-on: ubuntu-latest
    needs: [test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/mobile-app/package-lock.json

      - name: 📥 Install dependencies
        working-directory: services/mobile-app
        run: npm ci

      - name: 🔧 Setup Expo CLI
        run: npm install -g @expo/cli

      - name: 🏗️ Build for Android
        working-directory: services/mobile-app
        run: expo build:android --type apk
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🏗️ Build for iOS
        working-directory: services/mobile-app
        run: expo build:ios --type archive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # 📋 Notification
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#prism-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}